(load "Sect02_23_permutations.scm")
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (new-row)
            (map (lambda (rest-of-queens)
                   (adjoin-position
                    new-row k rest-of-queens))
                 (queen-cols (- k 1))))
          (enumerate-interval 1 board-size)))))
  (queen-cols board-size))
(define (adjoin-position row col board)
  (if (null? board)
      (list row)
      (cons row board)))
(define empty-board '())
(define (safe? k sets)
  (define (bad-position? new-row new-col old-row old-col)
    (or (= new-row old-row)
        (= (abs (- new-row old-row))
           (abs (- new-col old-col)))))
  (define (safe-iter new-row old-col seq)
    (cond ((null? seq) #t)
          ((bad-position? new-row k (car seq) old-col) #f)
          (else (safe-iter new-row (- old-col 1) (cdr seq)))))
  (if (null? sets)
      #t
      (safe-iter (car sets) (- k 1) (cdr sets))))
