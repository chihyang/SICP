(load "Sect02_23_permutations.scm")
(define (queens board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? k positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position
                    new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))
(define (adjoin-position row col board)
  (if (null? board)
      (list (list col row))
      (append (list (list col row)) board)))
(define empty-board '())
(define (safe? k sets)
  (define (bad-pairs? pair1 pair2)
    (let ((x (abs (- (car pair1) (car pair2))))
          (y (abs (- (cadr pair1) (cadr pair2)))))
      (or (< (+ x y) 3)
          (= (cadr pair1) (cadr pair2))
          (= x y))))
  (define (safe-iter pair seq)
    (cond ((null? seq) #t)
          ((bad-pairs? pair (car seq)) #f)
          (else (safe-iter pair (cdr seq)))))
  (if (null? sets)
      #t
      (safe-iter (car sets) (cdr sets))))
