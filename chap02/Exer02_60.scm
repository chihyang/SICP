(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set) (cons x set))
(define (intersection-set set1 set2)
  (let ((iset
         (cond ((or (null? set1) (null? set2)) '())
               ((element-of-set? (car set1) set2)
                (cons (car set1) (intersection-set (cdr set1) set2)))
               (else (intersection-set (cdr set1) set2)))))
    (remove-repeated iset)))
(define (union-set set1 set2) (remove-repeated (append set1 set2)))
(define (remove-repeated set)
  (cond ((null? set) set)
        ((element-of-set? (car set) (cdr set)) (remove-repeated (cdr set)))
        (else (cons (car set) (remove-repeated (cdr set))))))
