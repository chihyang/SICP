(define (make-mobile left right)
  (cons left right))
(define (make-branch length structure)
  (cons length structure))
(define (left-branch mobile)
  (car mobile))
(define (right-branch mobile)
  (cdr mobile))
(define (branch-length branch)
  (car branch))
(define (branch-structure branch)
  (cdr branch))

(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
(define (branch-weight branch)
  (if (not (mobile? (branch-structure branch)))
      (branch-structure branch)
      (total-weight (branch-structure branch))))
(define (mobile? object)
  (pair? object))

(define (balanced? mobile)
  (and (branch-balanced? (left-branch mobile))
       (branch-balanced? (right-branch mobile))
       (= (torque (left-branch mobile))
          (torque (right-branch mobile)))))
(define (torque branch)
  (* (branch-length branch)
     (branch-weight branch)))
(define (branch-balanced? branch)
  (if (mobile? (branch-structure branch))
      (balanced? (branch-structure branch))
      #t))
