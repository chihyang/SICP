(load "Exer02_38.scm")
(define (variable? x) (symbol? x))
(define (expression? e) (or (sum? e) (product? e)))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (make-sum (cddr s)))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (make-product (cddr p)))
(define (make-sum items)
  (let ((sum-list (fold-left make-sum-of-two 0 items)))
    (if (or (expression? sum-list) (symbol? sum-list) (number? sum-list))
         sum-list
        (cons '+ sum-list))))
(define (make-sum-of-two a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2))
         (+ a1 a2))
        ((null? a2) a1)
        ((sum? a1) (append (make-sum (cdr a1)) (list a2)))
        ((product? a1) (append (list (make-product (cdr a1))) (list a2)))
        ((pair? a1) (append a1 (list a2)))
        (else (list a1 a2))))
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-product items)
  (let ((product-list (fold-left make-product-of-two 1 items)))
    (if (or (expression? product-list) (symbol? product-list) (number? product-list))
         product-list
        (cons '* product-list))))
(define (make-product-of-two m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (number? m1) (number? m2)) (* m1 m2))
        ((sum? m1) (append (list (make-sum (cdr m1))) (list m2)))
        ((product? m1) (append (make-product (cdr m1)) (list m2)))
        ((pair? m1) (append m1 (list m2)))
        (else (list m1 m2))))
