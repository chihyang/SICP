(load "Sect02_34_huffman_trees.scm")
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge pairs)
  (merge-iter '() pairs))
(define (merge-iter tree set)
  (cond ((null? set) tree)
        ((null? (cdr set))
         (make-code-tree (car set) tree))
        ((null? tree)
         (merge-iter (make-code-tree (cadr set) (car set))
                     (cddr set)))
        ((< (weight tree) (weight (car set)))
         (merge-iter (make-code-tree tree (car set))
                     (cdr set)))
        ((or (> (weight tree) (weight (car set))) (null? tree))
         (merge-iter (make-code-tree (cadr set) (car set))
                     (cons tree (cddr set))))
        (else
         (merge-iter (make-code-tree (car set) tree)
                     (cdr set)))))
