(load "Sect02_34_huffman_trees.scm")
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol symbol tree)
  (cond ((leaf? tree) '())
        ((symbol-in-branch? symbol (left-branch tree))
         (cons 0 (encode-symbol symbol (left-branch tree))))
        ((symbol-in-branch? symbol (right-branch tree))
         (cons 1 (encode-symbol symbol (right-branch tree))))
        (else (error "bad symbol: not encoded" symbol))))
(define (symbol-in-branch? symbol branch)
  (define (find-symbol s syms)
    (cond ((null? syms) #f)
          ((eq? s (car syms)) #t)
          (else (find-symbol s (cdr syms)))))
  (if (leaf? branch)
      (eq? symbol (symbol-leaf branch))
      (let ((syms (symbols branch)))
        (find-symbol symbol syms))))
